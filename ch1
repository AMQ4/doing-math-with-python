*use fraction modules to deal with fractions

*complex numbers operations:
    Addition and Subtraction:
    To add or subtract two complex numbers, simply add or subtract their real and imaginary parts separately:

    (a + bi) + (c + di) = (a + c) + (b + d)i
    (a + bi) - (c + di) = (a - c) + (b - d)i
    Multiplication:
    To multiply two complex numbers, you can use the distributive property:

    (a + bi) * (c + di) = (ac - bd) + (ad + bc)i
    Division:
    To divide complex numbers, you can use the conjugate of the denominator to rationalize the division:

    (a + bi) / (c + di) = ((a + bi) * (c - di)) / (c^2 + d^2)
    Conjugate:
    The conjugate of a complex number a + bi is a - bi. It's obtained by negating the imaginary part.

    Absolute Value (Modulus) or Magnitude:
    The absolute value or modulus of a complex number a + bi is given by |a + bi| = sqrt(a^2 + b^2). 
    It represents the distance of the complex number from the origin in the complex plane.

    Argument (Angle/Phase):
    The argument of a complex number is the angle it forms with the positive real axis in the complex plane. 
    It's typically denoted as θ and can be calculated using trigonometric functions:

    θ = arctan(b/a) for the principal argument.
    Exponentiation:
    Euler's formula is often used to exponentiate complex numbers: e^(ix) = cos(x) + isin(x). This formula
    relates exponentiation of the imaginary unit to trigonometric functions.

    *The modulus (%) and the floor division (//) operations are not valid for
     complex numbers.

* Handling Exceptions and Invalid Input
    why exception handling?
    if a user attempts to read integer and he typed '2.0', I mean:
    >>x = int(input())
    >>2.0
    this will cause an error, and so on.

    ex:
    try:
        a = float(input('Enter a number: '))
    except ValueError:
        print('You entered an invalid number')
* you can cast fractions and complex numbers form string, e.g 
  >>f = Fraction(input())
  with-out spaces:
  '3 / 1'
  '4 + j1'
  '1+j1' / should be '1+1j'
  all of above will case a ValueError

* format()
  ex:
    >>> item1 = 'apples'
    >>> item2 = 'bananas'
    >>> item3 = 'grapes'
    >>> print('At the grocery store, I bought some {0} and {1} and {2}'.format(item1, item2, item3))
  the first parm. will be in {0}, the 2nd in {1}, and so on.

  * You can use the format() method to further control how numbers are
    printed.
    ex:

    >>> '{0:.2f}'.format(1.26443)
        '1.25'
        *Note that the number is rounded.
    >>> '{0:.2f}'.format(1.26543), ex:
        '1.26'
* Converting Units of Measurement
  miles = km / 1.609
  F = C * (9/5) + 32